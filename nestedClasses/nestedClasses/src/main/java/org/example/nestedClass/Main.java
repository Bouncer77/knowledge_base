package org.example.nestedClass;

/**
 * @author Kosenkov Ivan
 * Created by Kosenkov Ivan on 06.08.2020
 */

/**
 * Nested classes: (Вложенные классы)
 *      1. Inner class (Внутренние классы)
 *          1. Member inner class (Внутренние классы-члены)
 *              * Есть возможность обращения к внутренним полям и методам класса обертки.
 *              * Не может иметь статических объявлений.
 *              * Нельзя объявить таким образом интерфейс. А если его объявить без идентификатора static, то он автоматически будет добавлен.
 *              * Внутри такого класса нельзя объявить перечисления.
 *              * Если нужно явно получить this внешнего класса – OuterClass.this
 *          2. Local Inner class (Локальный класс)
 *              * Видны только в пределах блока, в котором объявлены.
 *              * Не могут быть объявлены как private/public/protected или static (по этой причине интерфейсы нельзя объявить локально).
 *              * Не могут иметь внутри себя статических объявлений (полей, методов, классов).
 *              * Имеют доступ к полям и методам обрамляющего класса.
 *              * Можно обращаться к локальным переменным и параметрам метода, если они объявлены с модификатором final.
 *          3. Anonymous Inner Class
 *              * Локальный класс без имени.
 *      2. Static nested classes (Статические вложенные классы)
 *          * Есть возможность обращения к внутренним статическим полям и методам класса обертки.
 *          * Внутренние статические классы могут содержать только статические методы.
 *
 *      Использование вложенных классов всегда приводит к некоторому нарушению инкапсуляции
 *      — вложенный класс может обращаться к закрытым членам внешнего класса (но не наоборот!).
 *
 *     локальные классы (local classes);
 *     Локальные классы (local classes) определяются в блоке Java кода.
 *     На практике чаще всего объявление происходит в методе некоторого другого класса.
 *     Хотя объявлять локальный класс можно внутри статических и нестатических блоков инициализации.
 *
 *     Если вложенный класс не статический и поле не статическое, то можно просто обратиться к этому полю из внутреннего
 *     класса, если только у внутреннего класса не существует поля с таким же литералом, в этом случае нужно обращаться
 *     через ссылку на внешний класс так – OuterClass.this.имяПоля
 * */
public class Main {
    public static void main(String[] args) {

        // Прямой код
        // 0 0001101
        // 1 0001101 // 141_10

        // Дополнительный код
        // Из отрицательного числа
        /*
            1. Инвертируем все разряды, кроме старшего
            2. Прибавляем единицу

          0. 1_0001101
          1. 1_1110010
          2. 1_1110011
         */
        byte a = 0b00001101;
        byte b = (byte) 0b1_1110011;
        System.out.println(Integer.toBinaryString(a));
        System.out.println(a);
        System.out.println(Integer.toBinaryString(b));
        System.out.println(b);
        System.out.println();

        // для отрицательных чисел используется дополнительный код


        // byte - 8 bit - от -128 до 127
        System.out.println((int) Math.pow(2, 7)); // 128
        System.out.println((byte) Math.pow(2, 7)); // -128
    }
}
